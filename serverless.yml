# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tasky
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details

frameworkVersion: '2'

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
#  stage: ${opt:stage, 'development'}
#  region: us-east-1
#  profile: default

custom:
  localstack:
    debug: true
    stages:
      # list of stages for which the plugin should be enabled
      - local
    host: http://localhost  # optional - LocalStack host to connect to
    #autostart: true  # optional - start LocalStack in Docker on Serverless deploy
    endpoints:
      # This section is optional - can be used for customizing the target endpoints
      Lambda: http://localhost:4566
      S3: http://localhost:4566
      # DynamoDB: http://localhost:4570
      CloudFormation: http://localhost:4566
      Elasticsearch: http://localhost:4566
      ES: http://localhost:4566
      SNS: http://localhost:4566
      SQS: http://localhost:4566
      Kinesis: http://localhost:4566
    # lambda:
    #   # Enable this flag to improve performance
    #   mountCode: True
    # docker:
    #   # Enable this flag to run "docker ..." commands as sudo
    #   sudo: False

# you can define service wide environment variables here
# environment:
#   NODE_ENV: production
plugins:
  - serverless-localstack

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  login:
    handler: src/handler.login
    events:
      - http:
          path: login
          method: post
          cors: true
  hello:
    handler: src/handler.hello
    events:
      - http:
          path: hello
          method: get
          cors: true
  getOrganizations:
    handler: src/handler.getOrganizations
    events:
      - http:
          path: getOrganizations
          method: get
          cors: true
  getOrganizationById:
    handler: src/handler.getOrganizationById
    events:
      - http:
          path: getOrganizationById/{id}
          method: get
          cors: true
  updateUserTeam:
    handler: src/handler.updateUserTeam
    events:
      - http:
          path: updateUserTeam
          method: put
          cors: true
  updateUserToken:
    handler: src/handler.updateUserToken
    events:
      - http:
          path: updateUserToken
          method: put
          cors: true
  inviteMembers:
    handler: src/handler.inviteMembers
    events:
      - http:
          path: inviteMembers
          method: post
          cors: true
  createOrganization:
    handler: src/handler.createOrganization
    events:
      - http:
          path: createOrganization
          method: post
          cors: true
  getUserInformation:
    handler: src/handler.getUserInformation
    events:
      - http:
          path: getUserInformation
          method: get
          cors: true
  createTask:
    handler: src/handler.createTask
    events:
      - http:
          path: createTask
          method: post
          cors: true
  listMembers:
    handler: src/handler.listMembers
    events:
      - http:
          path: listMembers/{organizationId}
          method: get
          cors: true
  getTasks:
    handler: src/handler.getTasks
    events:
      - http:
          path: getTasks/{organizationId}
          method: get
          cors: true
  updateTask:
    handler: src/handler.updateTask
    events:
      - http:
          path: updateTask/{id}
          method: put
          cors: true
  getTaskStatusCount:
    handler: src/handler.getTaskStatusCount
    events:
      - http:
          path: getTaskStatusCount/{userId}
          method: get
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
